// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  Practitioner Practitioner[]
  UserTwoFA    UserTwoFA?
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expireTime DateTime
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Practitioner {
  id                Int                @id @default(autoincrement())
  fullname          String
  passwordChanged   Boolean            @default(false)
  email             String             @unique
  contact           String             @unique
  dob               DateTime
  password          String
  address           String
  image             String             @db.LongText
  createdBy         User               @relation(fields: [createdByUserId], references: [id])
  createdByUserId   Int
  icuSpecialist     Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  startTime         DateTime
  endTime           DateTime
  WorkingDays       Day[]
  Specializations   Specialization[]
  Attendance        Attendance[]
  PractitionerTwoFA PractitionerTwoFA?
}

model Attendance {
  id             Int          @id @default(autoincrement())
  date           DateTime
  checkInTime    DateTime?
  checkOutTime   DateTime?
  duration       Int?
  wasOvertime    Boolean?
  wasLate        Boolean?
  minHrAchieved  Boolean?
  Practitioner   Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  practitionerId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([date, practitionerId])
}

model UserTwoFA {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret    String
  qrImage   String   @db.LongText
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PractitionerTwoFA {
  id             Int          @id @default(autoincrement())
  practitionerId Int          @unique
  practitioner   Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  secret         String
  qrImage        String       @db.LongText
  verified       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum DayName {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Day {
  id            Int            @id @default(autoincrement())
  day           DayName        @unique
  Practitioners Practitioner[]
}

model Specialization {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  Practitioners Practitioner[]
}
